pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Govindharamanathan333/thunderbolt'
        REPO_DIR = 'thunderbolt'
    }

    triggers {
        // Trigger on GitHub push events (optional)
        githubPush() // Use githubPush instead of github
    }

    stages {
        stage('Check & Clean Existing Repository') {
            steps {
                script {
                    try {
                        if (fileExists(REPO_DIR)) {
                            echo "Repository directory ${REPO_DIR} already exists. Deleting..."
                            sh "rm -rf ${REPO_DIR}"
                        } else {
                            echo "No existing repository found. Proceeding to clone."
                        }
                        env.CHECK_CLEAN_STATUS = 'success'
                    } catch (Exception e) {
                        env.CHECK_CLEAN_STATUS = 'failed'
                        error("Failed during check and clean: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    try {
                        if (env.GITHUB_EVENT_NAME == 'push') { // Check if triggered by GitHub push event
                            echo "Triggered from GitHub. Using provided details."
                            def commitId = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                            def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                            def commitAuthor = sh(script: "git log -1 --pretty=%an", returnStdout: true).trim()
                            env.COMMIT_ID = commitId
                            env.COMMIT_MESSAGE = commitMessage
                            env.COMMIT_AUTHOR = commitAuthor
                            env.TRIGGER_USERNAME = commitAuthor
                        } else {
                            echo "Manual trigger. Using Jenkins username."
                            env.TRIGGER_USERNAME = env.USERNAME // Use Jenkins username for manual trigger
                            env.COMMIT_MESSAGE = 'Manual trigger'
                        }
                        echo "Cloning repository: ${REPO_URL}"
                        sh "git clone ${REPO_URL}"

                        dir(REPO_DIR) {
                            // ... rest of the steps within the directory (unchanged)
                        }
                        env.CLONE_STATUS = 'success'
                    } catch (Exception e) {
                        env.CLONE_STATUS = 'failed'
                        error("Failed to clone repository or retrieve commit details: ${e.getMessage()}")
                    }
                }
            }
        }

        // ... rest of the stages (Build, Test, Deploy) remain unchanged

        stage('Notify') {
            steps {
                script {
                    def checkCleanStatus = env.CHECK_CLEAN_STATUS ?: 'not executed'
                    def cloneStatus = env.CLONE_STATUS ?: 'not executed'
                    def buildStatus = env.BUILD_STATUS ?: 'not executed'
                    def testStatus = env.TEST_STATUS ?: 'not executed'
                    def deployStatus = env.DEPLOY_STATUS ?: 'not executed'

                    def statusMessage = """
                    *Build Notification:*
                    - *Job Name*: ${env.JOB_NAME}
                    - *Build Number*: ${env.BUILD_NUMBER}
                    - *Triggered By*: ${env.TRIGGER_USERNAME}
                    - *Build URL*: ${env.BUILD_URL}
                    - *Commit ID*: ${env.COMMIT_ID}
                    - *Commit Message*: ${env.COMMIT_MESSAGE}

                    --------------------------------------------------
                    
                    *Pipeline Status Notification:*
                    - *Check & Clean*: ${checkCleanStatus}
                    - *Clone*: ${cloneStatus}
                    - *Build*: ${buildStatus}
                    - *Test*: ${testStatus}
                    - *Deploy*: ${deployStatus}
                    """

                    rocketSend(message: statusMessage)
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed.'
        }
    }
}
