pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Govindharamanathan333/thunderbolt'
        REPO_DIR = 'thunderbolt'
    }

    triggers {
        // Trigger on GitHub push events
        githubPush()
    }

    stages {
        stage('Check & Clean Existing Repository') {
            steps {
                script {
                    try {
                        if (fileExists(REPO_DIR)) {
                            echo "Repository directory ${REPO_DIR} already exists. Deleting..."
                            sh "rm -rf ${REPO_DIR}"
                        } else {
                            echo "No existing repository found. Proceeding to clone."
                        }
                        env.CHECK_CLEAN_STATUS = 'success'
                    } catch (Exception e) {
                        env.CHECK_CLEAN_STATUS = 'failed'
                        error("Failed during check and clean: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    try {
                        echo "Cloning repository: ${REPO_URL}"
                        sh "git clone ${REPO_URL}"

                        dir(REPO_DIR) {
                            // Get the latest commit details
                            def commitId = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                            def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                            def commitAuthor = sh(script: "git log -1 --pretty=%an", returnStdout: true).trim()
                            
                            env.COMMIT_ID = commitId
                            env.COMMIT_MESSAGE = commitMessage
                            env.COMMIT_AUTHOR = commitAuthor
                            
                            // Determine if triggered manually or by GitHub push
                            def userCause = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause)
                            if (userCause) {
                                env.TRIGGER_USERNAME = userCause.getUserId()
                                echo "Build triggered manually by Jenkins user: ${env.TRIGGER_USERNAME}"
                            } else {
                                env.TRIGGER_USERNAME = commitAuthor
                                echo "Build triggered by GitHub push event. Last commit author: ${commitAuthor}"
                            }
                        }
                        env.CLONE_STATUS = 'success'
                    } catch (Exception e) {
                        env.CLONE_STATUS = 'failed'
                        error("Failed to clone repository or retrieve commit details: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        echo 'Building...'
                        // Add build logic here
                        env.BUILD_STATUS = 'success'
                    } catch (Exception e) {
                        env.BUILD_STATUS = 'failed'
                        error("Build failed: ${e.message}")
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        echo 'Testing...'
                        // Add test logic here
                        env.TEST_STATUS = 'success'
                    } catch (Exception e) {
                        env.TEST_STATUS = 'failed'
                        error("Test failed: ${e.message}")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    try {
                        echo 'Deploying...'
                        // Add deployment logic here
                        env.DEPLOY_STATUS = 'success'
                    } catch (Exception e) {
                        env.DEPLOY_STATUS = 'failed'
                        error("Deployment failed: ${e.message}")
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Ensure TRIGGER_USERNAME is not null or empty
                def triggerUser = env.TRIGGER_USERNAME ?: 'Manual trigger by Jenkins user'
                
                // Define status messages for each stage
                def checkCleanStatus = env.CHECK_CLEAN_STATUS ?: 'not executed'
                def cloneStatus = env.CLONE_STATUS ?: 'not executed'
                def buildStatus = env.BUILD_STATUS ?: 'not executed'
                def testStatus = env.TEST_STATUS ?: 'not executed'
                def deployStatus = env.DEPLOY_STATUS ?: 'not executed'

                // Build notification message
                def statusMessage = """
                *Build Notification:*
                - *Job Name*: ${env.JOB_NAME}
                - *Build Number*: ${env.BUILD_NUMBER}
                - *Triggered By*: ${triggerUser}
                - *Build URL*: ${env.BUILD_URL}
                - *Commit ID*: ${env.COMMIT_ID}
                - *Commit Message*: ${env.COMMIT_MESSAGE}

                --------------------------------------------------
                
                *Pipeline Status Notification:*
                - *Check & Clean*: ${checkCleanStatus}
                - *Clone*: ${cloneStatus}
                - *Build*: ${buildStatus}
                - *Test*: ${testStatus}
                - *Deploy*: ${deployStatus}
                """

                // Send message to Rocket.Chat (assuming you have configured rocketSend)
                rocketSend(message: statusMessage)
            }
        }

        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed.'
        }
    }
}
